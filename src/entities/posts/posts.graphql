scalar Date

type Query {
    post(_id: ID!): Post!
    posts(offset: Int!, limit: Int!): PostsWithCount!
    postsByOwner(owner: ID!, offset: Int!, limit: Int!): PostsWithCount!
    postsByTitle(input: PostsByTitleInput!): [Post!]
    postsByIds(ids: [ID!]!): [Post!]
    postsMostPopular(date: Date!): [Post!]
    postsByCategory(category: String!, offset: Int!, limit: Int!): PostsWithCount!
    postsByCategoryCount: PostsByCategoryCount!
    postsSavedByUser(user: ID!, offset: Int!, limit: Int!): PostsWithCount!
    postsMostRecent: [Post!]
    postsMostRecentByFollowing(user: ID!): [Post!]
}

input PostsByTitleInput {
    title: String!
    userId: ID
    userIsOwner: Boolean
}

type PostsWithCount {
    posts: [Post!]
    count: Int!
}

type PostsByCategoryCount {
    country: Int!
    pop: Int!
    classical: Int!
    funk: Int!
    soul: Int!
    hipHop: Int!
    rock: Int!
    electronic: Int!
    latin: Int!
    jazz: Int!
    blues: Int!
    folk: Int!
    metal: Int!
    reggae: Int!
}

type Post {
    _id: ID!
    owner: User!
    title: String!
    description: String!
    audio: String!
    image: String!
    likes: Int!
    saves: Int!
    category: String!
    downloadsAllowed: Boolean!
    createdAt: String!
}


type Mutation {
    postCreate(input: AddPostInput!): Post!
    postUpdate(input: UpdatePostInput!): Post!
    postDeleteById(_id: ID!): Post!
}

input AddPostInput {
    owner: ID!
    title: String!
    description: String!
    audio: String!
    image: String!
    category: String!
    downloadsAllowed: Boolean!
}

input UpdatePostInput {
    post: ID!
    what: String!
    value: String!
}