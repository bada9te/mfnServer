type Query {
    battleById(_id: ID!): Battle!
    battlesByStatus(finished: Boolean!, offset: Int!, limit: Int!): BattlesWithCount!
    battlesUserParticipatedIn(userId: ID!, offset: Int!, limit: Int!): BattlesWithCount!
}

type Battle {
    _id: ID!
    title: String!
    chainId: Int
    initiator: User
    post1: Post
    post2: Post
    post1Score: Int!
    post2Score: Int!
    winner: Post
    createdAt: String!
    willFinishAt: String!
    finished: Boolean!
    votedBy: [User]
}

input Range {
    offset: Int!
    limit: Int!
}

type BattlesWithCount {
    battles: [Battle!]
    count: Int!
}

type Mutation {
    battleCreate(input: AddNewBattleByPostsIdsInput!): Battle!
    battleDeleteById(_id: ID!): Battle!
    battleMakeVote(input: MakeBattleVoteInput!): Battle!
}

input AddNewBattleByPostsIdsInput {
    initiator: ID!
    title: String!
    post1: ID!
    post2: ID!
    chainId: Int
}

input MakeBattleVoteInput {
    battleId: ID!
    postNScore: String!
    voteCount: Int!
    voterId: ID!
}